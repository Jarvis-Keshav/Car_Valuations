{"ast":null,"code":"'use strict';\n\nvar _slicedToArray = require(\"C:\\\\Users\\\\HarshGupta\\\\Desktop\\\\Tvs-Credit-It-Challenge\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\nvar u = require('universalify').fromCallback;\nvar path = require('path');\nvar fs = require('../fs');\nvar _mkdirs = require('../mkdirs');\nvar mkdirs = _mkdirs.mkdirs;\nvar mkdirsSync = _mkdirs.mkdirsSync;\nvar _symlinkPaths = require('./symlink-paths');\nvar symlinkPaths = _symlinkPaths.symlinkPaths;\nvar symlinkPathsSync = _symlinkPaths.symlinkPathsSync;\nvar _symlinkType = require('./symlink-type');\nvar symlinkType = _symlinkType.symlinkType;\nvar symlinkTypeSync = _symlinkType.symlinkTypeSync;\nvar pathExists = require('../path-exists').pathExists;\nvar _require = require('../util/stat'),\n  areIdentical = _require.areIdentical;\nfunction createSymlink(srcpath, dstpath, type, callback) {\n  callback = typeof type === 'function' ? type : callback;\n  type = typeof type === 'function' ? false : type;\n  fs.lstat(dstpath, function (err, stats) {\n    if (!err && stats.isSymbolicLink()) {\n      Promise.all([fs.stat(srcpath), fs.stat(dstpath)]).then(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n          srcStat = _ref2[0],\n          dstStat = _ref2[1];\n        if (areIdentical(srcStat, dstStat)) return callback(null);\n        _createSymlink(srcpath, dstpath, type, callback);\n      });\n    } else _createSymlink(srcpath, dstpath, type, callback);\n  });\n}\nfunction _createSymlink(srcpath, dstpath, type, callback) {\n  symlinkPaths(srcpath, dstpath, function (err, relative) {\n    if (err) return callback(err);\n    srcpath = relative.toDst;\n    symlinkType(relative.toCwd, type, function (err, type) {\n      if (err) return callback(err);\n      var dir = path.dirname(dstpath);\n      pathExists(dir, function (err, dirExists) {\n        if (err) return callback(err);\n        if (dirExists) return fs.symlink(srcpath, dstpath, type, callback);\n        mkdirs(dir, function (err) {\n          if (err) return callback(err);\n          fs.symlink(srcpath, dstpath, type, callback);\n        });\n      });\n    });\n  });\n}\nfunction createSymlinkSync(srcpath, dstpath, type) {\n  var stats;\n  try {\n    stats = fs.lstatSync(dstpath);\n  } catch (_unused) {}\n  if (stats && stats.isSymbolicLink()) {\n    var srcStat = fs.statSync(srcpath);\n    var dstStat = fs.statSync(dstpath);\n    if (areIdentical(srcStat, dstStat)) return;\n  }\n  var relative = symlinkPathsSync(srcpath, dstpath);\n  srcpath = relative.toDst;\n  type = symlinkTypeSync(relative.toCwd, type);\n  var dir = path.dirname(dstpath);\n  var exists = fs.existsSync(dir);\n  if (exists) return fs.symlinkSync(srcpath, dstpath, type);\n  mkdirsSync(dir);\n  return fs.symlinkSync(srcpath, dstpath, type);\n}\nmodule.exports = {\n  createSymlink: u(createSymlink),\n  createSymlinkSync: createSymlinkSync\n};","map":null,"metadata":{},"sourceType":"script"}
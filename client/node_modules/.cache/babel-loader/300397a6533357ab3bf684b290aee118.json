{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar react_1 = require(\"react\");\nvar injectorState = {\n  queue: {},\n  injectorMap: {},\n  scriptMap: {}\n};\nfunction useInjectScript(url) {\n  var _a = (0, react_1.useState)({\n      loaded: false,\n      error: false\n    }),\n    state = _a[0],\n    setState = _a[1];\n  (0, react_1.useEffect)(function () {\n    var _a, _b, _c, _d, _e;\n    if (!((_a = injectorState.injectorMap) === null || _a === void 0 ? void 0 : _a[url])) {\n      injectorState.injectorMap[url] = 'init';\n    }\n    // check if the script is already cached\n    if (injectorState.injectorMap[url] === 'loaded') {\n      setState({\n        loaded: true,\n        error: false\n      });\n      return;\n    }\n    // check if the script already errored\n    if (injectorState.injectorMap[url] === 'error') {\n      setState({\n        loaded: true,\n        error: true\n      });\n      return;\n    }\n    var onScriptEvent = function onScriptEvent(error) {\n      var _a, _b, _c, _d;\n      // Get all error or load functions and call them\n      if (error) console.log('error loading the script');\n      (_b = (_a = injectorState.queue) === null || _a === void 0 ? void 0 : _a[url]) === null || _b === void 0 ? void 0 : _b.forEach(function (job) {\n        return job(error);\n      });\n      if (error && injectorState.scriptMap[url]) {\n        (_d = (_c = injectorState.scriptMap) === null || _c === void 0 ? void 0 : _c[url]) === null || _d === void 0 ? void 0 : _d.remove();\n        injectorState.injectorMap[url] = 'error';\n      } else injectorState.injectorMap[url] = 'loaded';\n      delete injectorState.scriptMap[url];\n    };\n    var stateUpdate = function stateUpdate(error) {\n      setState({\n        loaded: true,\n        error: error\n      });\n    };\n    if (!((_b = injectorState.scriptMap) === null || _b === void 0 ? void 0 : _b[url])) {\n      injectorState.scriptMap[url] = document.createElement('script');\n      if (injectorState.scriptMap[url]) {\n        injectorState.scriptMap[url].src = url;\n        injectorState.scriptMap[url].async = true;\n        // append the script to the body\n        document.body.append(injectorState.scriptMap[url]);\n        injectorState.scriptMap[url].addEventListener('load', function () {\n          return onScriptEvent(false);\n        });\n        injectorState.scriptMap[url].addEventListener('error', function () {\n          return onScriptEvent(true);\n        });\n        injectorState.injectorMap[url] = 'loading';\n      }\n    }\n    if (!((_c = injectorState.queue) === null || _c === void 0 ? void 0 : _c[url])) {\n      injectorState.queue[url] = [stateUpdate];\n    } else {\n      (_e = (_d = injectorState.queue) === null || _d === void 0 ? void 0 : _d[url]) === null || _e === void 0 ? void 0 : _e.push(stateUpdate);\n    }\n    // remove the event listeners\n    return function () {\n      var _a, _b;\n      //checks the main injector instance\n      //prevents Cannot read property 'removeEventListener' of null in hot reload\n      if (!injectorState.scriptMap[url]) return;\n      (_a = injectorState.scriptMap[url]) === null || _a === void 0 ? void 0 : _a.removeEventListener('load', function () {\n        return onScriptEvent(true);\n      });\n      (_b = injectorState.scriptMap[url]) === null || _b === void 0 ? void 0 : _b.removeEventListener('error', function () {\n        return onScriptEvent(true);\n      });\n    };\n  }, [url]);\n  return [state.loaded, state.error];\n}\nexports.default = useInjectScript;","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar react_1 = require(\"react\");\nvar typeDefs_1 = require(\"./typeDefs\");\nvar useInjectScript_1 = __importDefault(require(\"./useInjectScript\"));\nfunction useDrivePicker() {\n  var defaultScopes = ['https://www.googleapis.com/auth/drive.readonly'];\n  var _a = (0, useInjectScript_1.default)('https://apis.google.com/js/api.js'),\n    loaded = _a[0],\n    error = _a[1];\n  var _b = (0, useInjectScript_1.default)('https://accounts.google.com/gsi/client'),\n    loadedGsi = _b[0],\n    errorGsi = _b[1];\n  var _c = (0, react_1.useState)(false),\n    pickerApiLoaded = _c[0],\n    setpickerApiLoaded = _c[1];\n  var _d = (0, react_1.useState)(false),\n    openAfterAuth = _d[0],\n    setOpenAfterAuth = _d[1];\n  var _e = (0, react_1.useState)(false),\n    authWindowVisible = _e[0],\n    setAuthWindowVisible = _e[1];\n  var _f = (0, react_1.useState)(typeDefs_1.defaultConfiguration),\n    config = _f[0],\n    setConfig = _f[1];\n  var _g = (0, react_1.useState)(),\n    authRes = _g[0],\n    setAuthRes = _g[1];\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  var picker;\n  // get the apis from googleapis\n  (0, react_1.useEffect)(function () {\n    if (loaded && !error && loadedGsi && !errorGsi && !pickerApiLoaded) {\n      loadApis();\n    }\n  }, [loaded, error, loadedGsi, errorGsi, pickerApiLoaded]);\n  // use effect to open picker after auth\n  (0, react_1.useEffect)(function () {\n    if (openAfterAuth && config.token && loaded && !error && loadedGsi && !errorGsi && pickerApiLoaded) {\n      createPicker(config);\n      setOpenAfterAuth(false);\n    }\n  }, [openAfterAuth, config.token, loaded, error, loadedGsi, errorGsi, pickerApiLoaded]);\n  // open the picker\n  var openPicker = function openPicker(config) {\n    // global scope given conf\n    setConfig(config);\n    // if we didnt get token generate token.\n    if (!config.token) {\n      var client = google.accounts.oauth2.initTokenClient({\n        client_id: config.clientId,\n        scope: (config.customScopes ? __spreadArray(__spreadArray([], defaultScopes, true), config.customScopes, true) : defaultScopes).join(' '),\n        callback: function callback(tokenResponse) {\n          setAuthRes(tokenResponse);\n          createPicker(__assign(__assign({}, config), {\n            token: tokenResponse.access_token\n          }));\n        }\n      });\n      client.requestAccessToken();\n    }\n    // if we have token and everything is loaded open the picker\n    if (config.token && loaded && !error && pickerApiLoaded) {\n      return createPicker(config);\n    }\n  };\n  // load the Drive picker api\n  var loadApis = function loadApis() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    window.gapi.load('auth');\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    window.gapi.load('picker', {\n      callback: onPickerApiLoad\n    });\n  };\n  var onPickerApiLoad = function onPickerApiLoad() {\n    setpickerApiLoaded(true);\n  };\n  var createPicker = function createPicker(_a) {\n    var token = _a.token,\n      _b = _a.appId,\n      appId = _b === void 0 ? '' : _b,\n      _c = _a.supportDrives,\n      supportDrives = _c === void 0 ? false : _c,\n      developerKey = _a.developerKey,\n      _d = _a.viewId,\n      viewId = _d === void 0 ? 'DOCS' : _d,\n      disabled = _a.disabled,\n      multiselect = _a.multiselect,\n      _e = _a.showUploadView,\n      showUploadView = _e === void 0 ? false : _e,\n      showUploadFolders = _a.showUploadFolders,\n      _f = _a.setParentFolder,\n      setParentFolder = _f === void 0 ? '' : _f,\n      viewMimeTypes = _a.viewMimeTypes,\n      customViews = _a.customViews,\n      _g = _a.locale,\n      locale = _g === void 0 ? 'en' : _g,\n      setIncludeFolders = _a.setIncludeFolders,\n      setSelectFolderEnabled = _a.setSelectFolderEnabled,\n      _h = _a.disableDefaultView,\n      disableDefaultView = _h === void 0 ? false : _h,\n      callbackFunction = _a.callbackFunction;\n    if (disabled) return false;\n    var view = new google.picker.DocsView(google.picker.ViewId[viewId]);\n    if (viewMimeTypes) view.setMimeTypes(viewMimeTypes);\n    if (setIncludeFolders) view.setSelectFolderEnabled(true);\n    if (setSelectFolderEnabled) view.setSelectFolderEnabled(true);\n    var uploadView = new google.picker.DocsUploadView();\n    if (viewMimeTypes) uploadView.setMimeTypes(viewMimeTypes);\n    if (showUploadFolders) uploadView.setIncludeFolders(true);\n    if (setParentFolder) uploadView.setParent(setParentFolder);\n    picker = new google.picker.PickerBuilder().setAppId(appId).setOAuthToken(token).setDeveloperKey(developerKey).setLocale(locale).setCallback(callbackFunction);\n    if (!disableDefaultView) {\n      picker.addView(view);\n    }\n    if (customViews) {\n      customViews.map(function (view) {\n        return picker.addView(view);\n      });\n    }\n    if (multiselect) {\n      picker.enableFeature(google.picker.Feature.MULTISELECT_ENABLED);\n    }\n    if (showUploadView) picker.addView(uploadView);\n    if (supportDrives) {\n      picker.enableFeature(google.picker.Feature.SUPPORT_DRIVES);\n    }\n    picker.build().setVisible(true);\n    return true;\n  };\n  return [openPicker, authRes];\n}\nexports.default = useDrivePicker;","map":null,"metadata":{},"sourceType":"script"}
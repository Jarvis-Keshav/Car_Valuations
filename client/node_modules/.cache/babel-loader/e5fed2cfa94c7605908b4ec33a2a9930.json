{"ast":null,"code":"'use strict';\n\nvar _this = this;\nfunction parseContentType(str) {\n  if (str.length === 0) return;\n  var params = Object.create(null);\n  var i = 0;\n\n  // Parse type\n  for (; i < str.length; ++i) {\n    var code = str.charCodeAt(i);\n    if (TOKEN[code] !== 1) {\n      if (code !== 47 /* '/' */ || i === 0) return;\n      break;\n    }\n  }\n  // Check for type without subtype\n  if (i === str.length) return;\n  var type = str.slice(0, i).toLowerCase();\n\n  // Parse subtype\n  var subtypeStart = ++i;\n  for (; i < str.length; ++i) {\n    var _code = str.charCodeAt(i);\n    if (TOKEN[_code] !== 1) {\n      // Make sure we have a subtype\n      if (i === subtypeStart) return;\n      if (parseContentTypeParams(str, i, params) === undefined) return;\n      break;\n    }\n  }\n  // Make sure we have a subtype\n  if (i === subtypeStart) return;\n  var subtype = str.slice(subtypeStart, i).toLowerCase();\n  return {\n    type: type,\n    subtype: subtype,\n    params: params\n  };\n}\nfunction parseContentTypeParams(str, i, params) {\n  while (i < str.length) {\n    // Consume whitespace\n    for (; i < str.length; ++i) {\n      var code = str.charCodeAt(i);\n      if (code !== 32 /* ' ' */ && code !== 9 /* '\\t' */) break;\n    }\n\n    // Ended on whitespace\n    if (i === str.length) break;\n\n    // Check for malformed parameter\n    if (str.charCodeAt(i++) !== 59 /* ';' */) return;\n\n    // Consume whitespace\n    for (; i < str.length; ++i) {\n      var _code2 = str.charCodeAt(i);\n      if (_code2 !== 32 /* ' ' */ && _code2 !== 9 /* '\\t' */) break;\n    }\n\n    // Ended on whitespace (malformed)\n    if (i === str.length) return;\n    var name = void 0;\n    var nameStart = i;\n    // Parse parameter name\n    for (; i < str.length; ++i) {\n      var _code3 = str.charCodeAt(i);\n      if (TOKEN[_code3] !== 1) {\n        if (_code3 !== 61 /* '=' */) return;\n        break;\n      }\n    }\n\n    // No value (malformed)\n    if (i === str.length) return;\n    name = str.slice(nameStart, i);\n    ++i; // Skip over '='\n\n    // No value (malformed)\n    if (i === str.length) return;\n    var value = '';\n    var valueStart = void 0;\n    if (str.charCodeAt(i) === 34 /* '\"' */) {\n      valueStart = ++i;\n      var escaping = false;\n      // Parse quoted value\n      for (; i < str.length; ++i) {\n        var _code4 = str.charCodeAt(i);\n        if (_code4 === 92 /* '\\\\' */) {\n          if (escaping) {\n            valueStart = i;\n            escaping = false;\n          } else {\n            value += str.slice(valueStart, i);\n            escaping = true;\n          }\n          continue;\n        }\n        if (_code4 === 34 /* '\"' */) {\n          if (escaping) {\n            valueStart = i;\n            escaping = false;\n            continue;\n          }\n          value += str.slice(valueStart, i);\n          break;\n        }\n        if (escaping) {\n          valueStart = i - 1;\n          escaping = false;\n        }\n        // Invalid unescaped quoted character (malformed)\n        if (QDTEXT[_code4] !== 1) return;\n      }\n\n      // No end quote (malformed)\n      if (i === str.length) return;\n      ++i; // Skip over double quote\n    } else {\n      valueStart = i;\n      // Parse unquoted value\n      for (; i < str.length; ++i) {\n        var _code5 = str.charCodeAt(i);\n        if (TOKEN[_code5] !== 1) {\n          // No value (malformed)\n          if (i === valueStart) return;\n          break;\n        }\n      }\n      value = str.slice(valueStart, i);\n    }\n    name = name.toLowerCase();\n    if (params[name] === undefined) params[name] = value;\n  }\n  return params;\n}\nfunction parseDisposition(str, defDecoder) {\n  if (str.length === 0) return;\n  var params = Object.create(null);\n  var i = 0;\n  for (; i < str.length; ++i) {\n    var code = str.charCodeAt(i);\n    if (TOKEN[code] !== 1) {\n      if (parseDispositionParams(str, i, params, defDecoder) === undefined) return;\n      break;\n    }\n  }\n  var type = str.slice(0, i).toLowerCase();\n  return {\n    type: type,\n    params: params\n  };\n}\nfunction parseDispositionParams(str, i, params, defDecoder) {\n  while (i < str.length) {\n    // Consume whitespace\n    for (; i < str.length; ++i) {\n      var code = str.charCodeAt(i);\n      if (code !== 32 /* ' ' */ && code !== 9 /* '\\t' */) break;\n    }\n\n    // Ended on whitespace\n    if (i === str.length) break;\n\n    // Check for malformed parameter\n    if (str.charCodeAt(i++) !== 59 /* ';' */) return;\n\n    // Consume whitespace\n    for (; i < str.length; ++i) {\n      var _code6 = str.charCodeAt(i);\n      if (_code6 !== 32 /* ' ' */ && _code6 !== 9 /* '\\t' */) break;\n    }\n\n    // Ended on whitespace (malformed)\n    if (i === str.length) return;\n    var name = void 0;\n    var nameStart = i;\n    // Parse parameter name\n    for (; i < str.length; ++i) {\n      var _code7 = str.charCodeAt(i);\n      if (TOKEN[_code7] !== 1) {\n        if (_code7 === 61 /* '=' */) break;\n        return;\n      }\n    }\n\n    // No value (malformed)\n    if (i === str.length) return;\n    var value = '';\n    var valueStart = void 0;\n    var charset = void 0;\n    //~ let lang;\n    name = str.slice(nameStart, i);\n    if (name.charCodeAt(name.length - 1) === 42 /* '*' */) {\n      // Extended value\n\n      var charsetStart = ++i;\n      // Parse charset name\n      for (; i < str.length; ++i) {\n        var _code8 = str.charCodeAt(i);\n        if (CHARSET[_code8] !== 1) {\n          if (_code8 !== 39 /* '\\'' */) return;\n          break;\n        }\n      }\n\n      // Incomplete charset (malformed)\n      if (i === str.length) return;\n      charset = str.slice(charsetStart, i);\n      ++i; // Skip over the '\\''\n\n      //~ const langStart = ++i;\n      // Parse language name\n      for (; i < str.length; ++i) {\n        var _code9 = str.charCodeAt(i);\n        if (_code9 === 39 /* '\\'' */) break;\n      }\n\n      // Incomplete language (malformed)\n      if (i === str.length) return;\n\n      //~ lang = str.slice(langStart, i);\n      ++i; // Skip over the '\\''\n\n      // No value (malformed)\n      if (i === str.length) return;\n      valueStart = i;\n      var encode = 0;\n      // Parse value\n      for (; i < str.length; ++i) {\n        var _code10 = str.charCodeAt(i);\n        if (EXTENDED_VALUE[_code10] !== 1) {\n          if (_code10 === 37 /* '%' */) {\n            var hexUpper = void 0;\n            var hexLower = void 0;\n            if (i + 2 < str.length && (hexUpper = HEX_VALUES[str.charCodeAt(i + 1)]) !== -1 && (hexLower = HEX_VALUES[str.charCodeAt(i + 2)]) !== -1) {\n              var byteVal = (hexUpper << 4) + hexLower;\n              value += str.slice(valueStart, i);\n              value += String.fromCharCode(byteVal);\n              i += 2;\n              valueStart = i + 1;\n              if (byteVal >= 128) encode = 2;else if (encode === 0) encode = 1;\n              continue;\n            }\n            // '%' disallowed in non-percent encoded contexts (malformed)\n            return;\n          }\n          break;\n        }\n      }\n      value += str.slice(valueStart, i);\n      value = convertToUTF8(value, charset, encode);\n      if (value === undefined) return;\n    } else {\n      // Non-extended value\n\n      ++i; // Skip over '='\n\n      // No value (malformed)\n      if (i === str.length) return;\n      if (str.charCodeAt(i) === 34 /* '\"' */) {\n        valueStart = ++i;\n        var escaping = false;\n        // Parse quoted value\n        for (; i < str.length; ++i) {\n          var _code11 = str.charCodeAt(i);\n          if (_code11 === 92 /* '\\\\' */) {\n            if (escaping) {\n              valueStart = i;\n              escaping = false;\n            } else {\n              value += str.slice(valueStart, i);\n              escaping = true;\n            }\n            continue;\n          }\n          if (_code11 === 34 /* '\"' */) {\n            if (escaping) {\n              valueStart = i;\n              escaping = false;\n              continue;\n            }\n            value += str.slice(valueStart, i);\n            break;\n          }\n          if (escaping) {\n            valueStart = i - 1;\n            escaping = false;\n          }\n          // Invalid unescaped quoted character (malformed)\n          if (QDTEXT[_code11] !== 1) return;\n        }\n\n        // No end quote (malformed)\n        if (i === str.length) return;\n        ++i; // Skip over double quote\n      } else {\n        valueStart = i;\n        // Parse unquoted value\n        for (; i < str.length; ++i) {\n          var _code12 = str.charCodeAt(i);\n          if (TOKEN[_code12] !== 1) {\n            // No value (malformed)\n            if (i === valueStart) return;\n            break;\n          }\n        }\n        value = str.slice(valueStart, i);\n      }\n      value = defDecoder(value, 2);\n      if (value === undefined) return;\n    }\n    name = name.toLowerCase();\n    if (params[name] === undefined) params[name] = value;\n  }\n  return params;\n}\nfunction getDecoder(charset) {\n  var lc;\n  while (true) {\n    switch (charset) {\n      case 'utf-8':\n      case 'utf8':\n        return decoders.utf8;\n      case 'latin1':\n      case 'ascii': // TODO: Make these a separate, strict decoder?\n      case 'us-ascii':\n      case 'iso-8859-1':\n      case 'iso8859-1':\n      case 'iso88591':\n      case 'iso_8859-1':\n      case 'windows-1252':\n      case 'iso_8859-1:1987':\n      case 'cp1252':\n      case 'x-cp1252':\n        return decoders.latin1;\n      case 'utf16le':\n      case 'utf-16le':\n      case 'ucs2':\n      case 'ucs-2':\n        return decoders.utf16le;\n      case 'base64':\n        return decoders.base64;\n      default:\n        if (lc === undefined) {\n          lc = true;\n          charset = charset.toLowerCase();\n          continue;\n        }\n        return decoders.other.bind(charset);\n    }\n  }\n}\nvar decoders = {\n  utf8: function utf8(data, hint) {\n    if (data.length === 0) return '';\n    if (typeof data === 'string') {\n      // If `data` never had any percent-encoded bytes or never had any that\n      // were outside of the ASCII range, then we can safely just return the\n      // input since UTF-8 is ASCII compatible\n      if (hint < 2) return data;\n      data = Buffer.from(data, 'latin1');\n    }\n    return data.utf8Slice(0, data.length);\n  },\n  latin1: function latin1(data, hint) {\n    if (data.length === 0) return '';\n    if (typeof data === 'string') return data;\n    return data.latin1Slice(0, data.length);\n  },\n  utf16le: function utf16le(data, hint) {\n    if (data.length === 0) return '';\n    if (typeof data === 'string') data = Buffer.from(data, 'latin1');\n    return data.ucs2Slice(0, data.length);\n  },\n  base64: function base64(data, hint) {\n    if (data.length === 0) return '';\n    if (typeof data === 'string') data = Buffer.from(data, 'latin1');\n    return data.base64Slice(0, data.length);\n  },\n  other: function other(data, hint) {\n    if (data.length === 0) return '';\n    if (typeof data === 'string') data = Buffer.from(data, 'latin1');\n    try {\n      var decoder = new TextDecoder(_this);\n      return decoder.decode(data);\n    } catch (_unused) {}\n  }\n};\nfunction convertToUTF8(data, charset, hint) {\n  var decode = getDecoder(charset);\n  if (decode) return decode(data, hint);\n}\nfunction basename(path) {\n  if (typeof path !== 'string') return '';\n  for (var i = path.length - 1; i >= 0; --i) {\n    switch (path.charCodeAt(i)) {\n      case 0x2F: // '/'\n      case 0x5C:\n        // '\\'\n        path = path.slice(i + 1);\n        return path === '..' || path === '.' ? '' : path;\n    }\n  }\n  return path === '..' || path === '.' ? '' : path;\n}\nvar TOKEN = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\nvar QDTEXT = [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];\nvar CHARSET = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\nvar EXTENDED_VALUE = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n\n/* eslint-disable no-multi-spaces */\nvar HEX_VALUES = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, -1, -1, -1, -1, -1, -1, -1, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1];\n/* eslint-enable no-multi-spaces */\n\nmodule.exports = {\n  basename: basename,\n  convertToUTF8: convertToUTF8,\n  getDecoder: getDecoder,\n  parseContentType: parseContentType,\n  parseDisposition: parseDisposition\n};","map":null,"metadata":{},"sourceType":"script"}